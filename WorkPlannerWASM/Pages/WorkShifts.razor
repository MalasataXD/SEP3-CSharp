@page "/WorkShifts"
@using UIComponents

@inject IWorkerService WorkerService
@inject IWorkShiftService WorkShiftService
@inject NavigationManager navMgr


@using Domain.Models
@using HttpClients.Interfaces
@using Domain.DTOs.WorkShift
@using System.Globalization
@using System.Collections
<h3>WorkShifts</h3>

@if (workers == null)
{
    <p>You have no workers</p>
}

@if (workers != null)
{
    <div class="form-group field">
        <label>Worker:</label>
        <select @bind-value="selectedUserId" @onchange="UpdateSchema" @bind-value:event="oninput">
            @foreach (Worker worker in workers)
            {
                <option value="@worker.WorkerId">@worker.getFullName()</option>
            }
        </select>
    </div>
    
    @if (selectedUserId == 0)
    {
        <div>
            <button disabled @onclick="ShowCreatePopUp">Create</button>
        </div>
    }
    else
    {
        <div>
            <button @onclick="ShowCreatePopUp">Create</button>
        </div>
    }

    <div class="btn-group">
        <h5>Date: @dateTime.Day-@dateTime.Month-@dateTime.Year   </h5>
        <button @onclick="@(e => UpdateDate(-1, 0))">-</button>
        <h5 style="float: left">Uge: @weekNumber</h5>
        <button @onclick="@(e => UpdateDate(1, 0))">+</button>
    </div>
    <div style="float: left">
        <button style="float: left" @onclick="@(e => UpdateDate(0,-1))">-</button>
        <h5 style="float: left">Year: @year</h5>
        <button  @onclick="@(e => UpdateDate(0, 1))">+</button>
    </div>


    <table>
        <tr>
            <td>Time</td>
            @for (int i = 0; i < 7; i++)
            {
                <td style="text-align: center">@dateTime.DayOfWeek @dateTime.Day</td>
                dateTime = dateTime.AddDays(1);
            }
            @if (true)
            {
                dateTime = dateTime.AddDays(-7);
            }
        </tr>
        
        <tr>
            <td>
                <table class="noBorder">
                    @for (int i = 0; i < 24; i++)
                    {
                        if (i < 10)
                        {
                            <tr class="onlyBorderBottom">
                                <td class="noBorder">0@{@i}:00</td>
                            </tr>
                        }
                        else
                        {
                            <tr class="onlyBorderBottom">
                                <td class="noBorder">@i:00</td>
                            </tr> 
                        }
                        }
                </table>
            </td>
            
            @if (selectedUserId != 0 && _sundayWorkShifts != null)
            {
                <td>
                    @foreach (WorkShift workShift in _mondayWorkShifts)
                    {
                        <button class="card" @onclick="@(e => ShowWorkShiftPopUp(workShift.ShiftId.ToString(),workShift.Date, workShift.FromTime, workShift.ToTime, workShift.BreakAmount))">
                         <WorkShiftComponent date="@workShift.Date" fromTime="@workShift.FromTime" toTime="@workShift.ToTime" BreakAmount="@workShift.BreakAmount"></WorkShiftComponent>
                        </button>
                    }
                </td>
                <td>
                    @foreach (WorkShift workShift in _tuesdayWorkShifts)
                    {
                        @* @onclick="@(e => UpdateDate(0,-1))" *@
                    <button class="card" @onclick="@(e => ShowWorkShiftPopUp(workShift.ShiftId.ToString(),workShift.Date, workShift.FromTime, workShift.ToTime, workShift.BreakAmount))">
                    <WorkShiftComponent date="@workShift.Date" fromTime="@workShift.FromTime" toTime="@workShift.ToTime" BreakAmount="@workShift.BreakAmount"></WorkShiftComponent>
                    </button>
                    }                    
                </td>
                <td>
                    @foreach (WorkShift workShift in _wednesdayWorkShifts)
                    {
                    <button class="card" @onclick="@(e => ShowWorkShiftPopUp(workShift.ShiftId.ToString(),workShift.Date, workShift.FromTime, workShift.ToTime, workShift.BreakAmount))">
                    <WorkShiftComponent date="@workShift.Date" fromTime="@workShift.FromTime" toTime="@workShift.ToTime" BreakAmount="@workShift.BreakAmount"></WorkShiftComponent>
                    </button>
                    }                    
                </td>
                <td>
                    @foreach (WorkShift workShift in _thursdayWorkShifts)
                    {
                        <button class="card" @onclick="@(e => ShowWorkShiftPopUp(workShift.ShiftId.ToString(),workShift.Date, workShift.FromTime, workShift.ToTime, workShift.BreakAmount))">
                    <WorkShiftComponent date="@workShift.Date" fromTime="@workShift.FromTime" toTime="@workShift.ToTime" BreakAmount="@workShift.BreakAmount"></WorkShiftComponent>
                    </button>
                    }                    
                </td>
                <td>
                    @foreach (WorkShift workShift in _fridayWorkShifts)
                    {
                        <button class="card" @onclick="@(e => ShowWorkShiftPopUp(workShift.ShiftId.ToString(),workShift.Date, workShift.FromTime, workShift.ToTime, workShift.BreakAmount))">
                    <WorkShiftComponent date="@workShift.Date" fromTime="@workShift.FromTime" toTime="@workShift.ToTime" BreakAmount="@workShift.BreakAmount"></WorkShiftComponent>
                    </button>
                    }                    
                </td>
                <td>
                    @foreach (WorkShift workShift in _saturdayWorkShifts)
                    {
                        <button class="card" @onclick="@(e => ShowWorkShiftPopUp(workShift.ShiftId.ToString(),workShift.Date, workShift.FromTime, workShift.ToTime, workShift.BreakAmount))">
                    <WorkShiftComponent date="@workShift.Date" fromTime="@workShift.FromTime" toTime="@workShift.ToTime" BreakAmount="@workShift.BreakAmount"></WorkShiftComponent>
                    </button>
                    }                    
                </td>
                <td>
                    @foreach (WorkShift workShift in _sundayWorkShifts)
                    {
                        <button class="card" @onclick="@(e => ShowWorkShiftPopUp(workShift.ShiftId.ToString(),workShift.Date, workShift.FromTime, workShift.ToTime, workShift.BreakAmount))">
                    <WorkShiftComponent date="@workShift.Date" fromTime="@workShift.FromTime" toTime="@workShift.ToTime" BreakAmount="@workShift.BreakAmount"></WorkShiftComponent>
                    </button>
                    }                    
                </td>
            }
        </tr>
    </table>
    
    
    <PopUp ShowPopUp="showCreatePopUp">
        
        <button @onclick="@CloseCreatePopUp">Exit</button>
    
        <div class="form-group field">
            <label>Date:</label>
            <input type="text" @bind="date"/>
        </div>
    
        <div class="form-group field">
            <label>From Time:</label>
            <input type="text" @bind="fromTime"/>
        </div>
        <div class="form-group field">
            <label>To Time:</label>
            <input type="text" @bind="toTime"/>
        </div>
    
        <div class="form-group field">
            <label>Break Amount:</label>
            <input type="text" @bind="breakAmount"/>
        </div>
    
        <button @onclick="@CreateWorkShift">Create WorkShift</button>
    
        @if (!string.IsNullOrEmpty(popUpMsg))
        {
            <label style="color: red">@popUpMsg</label>
        }
    </PopUp>
    
    <PopUp ShowPopUp="showWorkShiftPopUp">
        
        <button @onclick="@CloseWorkShiftPopUp">Exit</button>
    
        <div class="form-group field">
            <label>ShiftId:</label>
            <input type="text" @bind="shiftId"/>
        </div>
        
        <div class="form-group field">
            <label>WorkerId:</label>
            <input type="text" @bind="workerId"/>
        </div>
                <div class="form-group field">
                    <label>Date:</label>
                    <input type="text" @bind="date"/>
                </div>
            
                <div class="form-group field">
                    <label>From Time:</label>
                    <input type="text" @bind="fromTime"/>
                </div>
                <div class="form-group field">
                    <label>To Time:</label>
                    <input type="text" @bind="toTime"/>
                </div>
            
                <div class="form-group field">
                    <label>Break Amount:</label>
                    <input type="text" @bind="breakAmount"/>
                </div>
        
        <button @onclick="UpdateWorkShift">Update WorkShift</button>
    
        @if (!string.IsNullOrEmpty(popUpMsg))
        {
            <label style="color: red">@popUpMsg</label>
        }
    </PopUp>

}



@code {

    private int selectedUserId = 0;

    private IEnumerable<Worker>? workers;
    private IEnumerable<WorkShift>? workShifts;
    private string msg = "";
    private string popUpMsg = "";
    private bool showCreatePopUp;
    private bool showWorkShiftPopUp;

    private string? nameFilter;

    //Create PopUp textfields
    private string date;
    private string fromTime;
    private string toTime;
    private string breakAmount;
    private string shiftId;
    private string workerId;
    
    private DateTime dateTime = DateTime.Today;
    private int weekNumber;
    private int year;

    // should be deleteable if call async method in body
    // other alternative array in array?

    private IEnumerable<WorkShift>? _mondayWorkShifts;
    private IEnumerable<WorkShift>? _tuesdayWorkShifts;
    private IEnumerable<WorkShift>? _wednesdayWorkShifts;
    private IEnumerable<WorkShift>? _thursdayWorkShifts;
    private IEnumerable<WorkShift>? _fridayWorkShifts;
    private IEnumerable<WorkShift>? _saturdayWorkShifts;
    private IEnumerable<WorkShift>? _sundayWorkShifts;

    protected override async Task OnInitializedAsync()
    {
        await LoadWorkers();
        
        while (dateTime.DayOfWeek != DayOfWeek.Monday)
        {
            dateTime = dateTime.AddDays(-1);
        }
          weekNumber = CultureInfo.InvariantCulture.Calendar.GetWeekOfYear(dateTime, CalendarWeekRule.FirstFourDayWeek, DayOfWeek.Monday);
          year = dateTime.Year;
    }
    
    private async Task UpdateSchema()
    {
        _mondayWorkShifts = await GetWorkShifts(0);
        _tuesdayWorkShifts = await GetWorkShifts(1);
        _wednesdayWorkShifts = await GetWorkShifts(2);
        _thursdayWorkShifts = await GetWorkShifts(3);
        _fridayWorkShifts = await GetWorkShifts(4);
        _saturdayWorkShifts = await GetWorkShifts(5);
        _sundayWorkShifts = await GetWorkShifts(6);
        
        
    }
    
    private async Task LoadWorkers()
    {
        try
        {
            workers = await WorkerService.GetAsync(nameFilter);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
    
    
    private async Task CreateWorkShift()
    {
        popUpMsg = "";
        if (string.IsNullOrEmpty(date) || string.IsNullOrEmpty(fromTime) || string.IsNullOrEmpty(toTime) || string.IsNullOrEmpty(breakAmount))
        {
            popUpMsg = "Fields may not be empty";
            return;
        }
        
        try
        {
            WorkShiftCreationDto dto = new(date, fromTime, toTime, selectedUserId ,breakAmount);

            WorkShift workShift = await WorkShiftService.CreateAsync(dto);
            
            //todo add workshift to schema without calling webapi
            await UpdateSchema();
            
            
            CloseCreatePopUp();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            popUpMsg = e.Message;
        }
    }

    private async Task<IEnumerable<WorkShift>> GetWorkShifts(int dayNumber)
    {
        DateTime dt = dateTime;
        dt = dt.AddDays(dayNumber);

        string date = $"{dt.Day}-{dt.Month}-{dt.Year}";

        Worker worker = workers.FirstOrDefault(w => w.WorkerId == selectedUserId);
     // Worker worker = WorkerService.GetByIdAsync();

        return workShifts = await WorkShiftService.GetAsync(date, worker.getFullName());
    }
    
    private async Task UpdateDate(int weekNumberChange, int yearChange)
    {
        dateTime = dateTime.AddDays(weekNumberChange * 7);
        dateTime = dateTime.AddYears(yearChange);
        
        weekNumber = CultureInfo.InvariantCulture.Calendar.GetWeekOfYear(dateTime, CalendarWeekRule.FirstFourDayWeek, DayOfWeek.Monday);
        year = dateTime.Year;
        
        await UpdateSchema();
    }
    
    private void ShowCreatePopUp()
    {
        showCreatePopUp = true;
    }
    
    private void CloseCreatePopUp()
    {
        showCreatePopUp = false;
        navMgr.NavigateTo("/WorkShifts");
    }
    
    private void ShowWorkShiftPopUp(string shiftId, string date, string fromTime, string toTime, string breakAmount)
    {
        this.shiftId = shiftId;
        this.date = date;
        this.fromTime = fromTime;
        this.toTime = toTime;
        this.breakAmount = breakAmount;
        workerId = selectedUserId.ToString();
        showWorkShiftPopUp = true;
    }
    
    private void CloseWorkShiftPopUp()
    {
        showWorkShiftPopUp = false;
        navMgr.NavigateTo("/WorkShifts");
    }

    private async Task UpdateWorkShift()
    {
        popUpMsg = "";
        if (string.IsNullOrEmpty(shiftId) || string.IsNullOrEmpty(workerId) || string.IsNullOrEmpty(date) || string.IsNullOrEmpty(fromTime) || string.IsNullOrEmpty(toTime) || string.IsNullOrEmpty(breakAmount))
        {
            popUpMsg = "Fields may not be empty";
            return;
        }
        
        try
        {
            WorkShiftUpdateDto dto = new(Int32.Parse(shiftId), Int32.Parse(workerId), date, fromTime, toTime, breakAmount);

            await WorkShiftService.UpdateAsync(dto);
            
    //todo add workshift to schema without calling webapi
            await UpdateSchema();
            
            
            CloseWorkShiftPopUp();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            popUpMsg = e.Message;
        }    
    }

}