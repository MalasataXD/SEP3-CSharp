@page "/WorkShifts"
@using UIComponents

@inject IWorkerService WorkerService
@inject IWorkShiftService WorkShiftService
@inject NavigationManager navMgr


@using Domain.Models
@using HttpClients.Interfaces
@using Domain.DTOs.WorkShift
@using System.Globalization

<h3>WorkShifts</h3>

@if (workers == null)
{
    <p>You have no workers</p>
}

@if (workers != null)
{
    <div class="form-group field">
        <label>Worker:</label>
        <select @bind-value="selectedUserId" @onchange="UpdateSchema" @bind-value:event="oninput">
            <option value="-1">Everyone</option>
            @foreach (Worker worker in workers)
            {
                <option value="@worker.WorkerId">@worker.getFullName()</option>
            }
        </select>
    </div>
    
    @if (selectedUserId == -1)
    {
        <div>
            <img class="icon" style="visibility: hidden" src="icons/shift-add.png" @onclick="ShowCreatePopUp"/>
        </div>
    }
    else
    {
        <div>
            <img class="icon" src="icons/shift-add.png" @onclick="ShowCreatePopUp"/>
        </div>
    }

    <div >
        <div class="btn-group">
            <h5>Year: @year</h5>
            <img class="icon" src="icons/arrow-alt-left.png" style="float: left" @onclick="@(e => UpdateDate(-1, 0))"/>
            <h5 style="float: left">Week: @weekNumber</h5>
            <img class="icon" src="icons/arrow-alt-right.png" @onclick="@(e => UpdateDate(1, 0))"/>
        </div>
    </div>


    @if (selectedUserId != -1 && _workShifts != null)
    {

        <table>
            <tr>
                @for (int i = 0; i < 7; i++)
                {
                    <td style="text-align: center">@dateTime.DayOfWeek @dateTime.Day-@dateTime.Month</td>
                    dateTime = dateTime.AddDays(1);
                }
                @if (true)
                {
                    dateTime = dateTime.AddDays(-7);
                }
            </tr>


            <tr>
                @for (int i = 0; i < 7; i++)
                {
                    int times = 0;
                    @foreach (var workShift in _workShifts)
                    {
                        string date = $"{dateTime.Day}-{dateTime.Month}-{dateTime.Year}";


                        times++;
                        if (workShift.Worker.WorkerId == selectedUserId && string.Equals(date, workShift.Date))
                        {
                            <td>
                                <button class="card" @onclick="@(e => ShowWorkShiftPopUp(workShift.ShiftId.ToString(), workShift.Worker.WorkerId.ToString(), workShift.Date, workShift.FromTime, workShift.ToTime, workShift.BreakAmount))">
                                    <WorkShiftComponent fromTime="@workShift.FromTime" toTime="@workShift.ToTime" BreakAmount="@workShift.BreakAmount"></WorkShiftComponent>
                                </button>
                            </td>
                            break;
                        }

                        if (times == _workShifts.ToList().Count)
                        {
                            <td>
                            </td>
                        }

                    }
                    dateTime = dateTime.AddDays(1);
                }

                @if (true)
                {
                    dateTime = dateTime.AddDays(-7);
                }
            </tr>
        </table>
        
    }
    
    else if (_workShifts != null)
    {
        <table class="table">
            <thead>
            <tr>
                <th>Name</th>
                @for (int i = 0; i < 7; i++)
            {
                    <td style="text-align: center">@dateTime.DayOfWeek @dateTime.Day-@dateTime.Month</td>
                dateTime = dateTime.AddDays(1);
            }
            @if (true)
            {
                dateTime = dateTime.AddDays(-7);
            }
        </tr>
            </thead>
            <tbody>
            @foreach (var worker in workers)
            {
                <tr>
                    <td>@worker.getFullName()</td>

                     @for (int i = 0; i < 7; i++)
                                   {
                                       int times = 0;
                                       @foreach (var workShift in _workShifts)
                                       {
                                           string date = $"{dateTime.Day}-{dateTime.Month}-{dateTime.Year}";

                                           times++;
                                           
                                           if (workShift.Worker.WorkerId == worker.WorkerId && string.Equals(date, workShift.Date))
                                           {
                                               <td>
                                                   <button class="card" @onclick="@(e => ShowWorkShiftPopUp(workShift.ShiftId.ToString(), workShift.Worker.WorkerId.ToString(), workShift.Date, workShift.FromTime, workShift.ToTime, workShift.BreakAmount))">
                                                       <WorkShiftComponent fromTime="@workShift.FromTime" toTime="@workShift.ToTime" BreakAmount="@workShift.BreakAmount"></WorkShiftComponent>
                                                   </button>
                                               </td>
                                               break;
                                           }
                   
                                           if (times == _workShifts.ToList().Count)
                                           {
                                               <td>
                                               </td>
                                           }
                   
                                       }
                                       dateTime = dateTime.AddDays(1);
                                   }
                   
                                   @if (true)
                                   {
                                       dateTime = dateTime.AddDays(-7);
                                   }
                </tr>
            }
            </tbody>
        </table>
    }
    
    
    <PopUp ShowPopUp="showCreatePopUp">
        
        <button @onclick="@CloseCreatePopUp">Exit</button>
    
        <div class="form-group field">
            <label>Date:</label>
            <input type="text" @bind="date"/>
        </div>
    
        <div class="form-group field">
            <label>From Time:</label>
            <input type="text" @bind="fromTime"/>
        </div>
        <div class="form-group field">
            <label>To Time:</label>
            <input type="text" @bind="toTime"/>
        </div>
    
        <div class="form-group field">
            <label>Break Amount:</label>
            <input type="text" @bind="breakAmount"/>
        </div>
    
        <button @onclick="@CreateWorkShift">Create WorkShift</button>
    
        @if (!string.IsNullOrEmpty(popUpMsg))
        {
            <label style="color: red">@popUpMsg</label>
        }
    </PopUp>
    
    <PopUp ShowPopUp="showWorkShiftPopUp">
        
        <button @onclick="@CloseWorkShiftPopUp">Exit</button>
        
        <div class="form-group field">
            <label>WorkerId:</label>
            <input type="text" @bind="workerId"/>
        </div>
                <div class="form-group field">
                    <label>Date:</label>
                    <input type="text" @bind="date"/>
                </div>
            
                <div class="form-group field">
                    <label>From Time:</label>
                    <input type="text" @bind="fromTime"/>
                </div>
                <div class="form-group field">
                    <label>To Time:</label>
                    <input type="text" @bind="toTime"/>
                </div>
            
                <div class="form-group field">
                    <label>Break Amount:</label>
                    <input type="text" @bind="breakAmount"/>
                </div>
        
        <button @onclick="UpdateWorkShift">Update WorkShift</button>
    
        <button @onclick="ShowDeleteConfirmationPopUp">Delete WorkShift</button>

        
        @if (!string.IsNullOrEmpty(popUpMsg))
        {
            <label style="color: red">@popUpMsg</label>
        }
    </PopUp>

    <PopUp ShowPopUp="showDeleteConfirmationPopUp">
        <h3>Are you sure you want to delete this</h3>
        
        <button @onclick="DeleteWorkShift">Yes</button>
        <button @onclick="CloseDeleteConfirmationPopUp">No</button>
    </PopUp>
}



@code {

    private int selectedUserId = -1;

    private IEnumerable<Worker>? workers;
    private List<WorkShift>? workShifts;
    private string msg = "";
    private string popUpMsg = "";
    private bool showCreatePopUp;
    private bool showWorkShiftPopUp;
    private bool showDeleteConfirmationPopUp;

    private string? nameFilter;

    //Create PopUp textfields
    private string date;
    private string fromTime;
    private string toTime;
    private string breakAmount;
    private string shiftId;
    private string workerId;
    
    private DateTime dateTime = DateTime.Today;
    private int weekNumber;
    private int year;
    private int month;

    // should be deleteable if call async method in body
    // other alternative array in array?


    
    private IEnumerable<WorkShift>? _workShifts;


    protected override async Task OnInitializedAsync()
    {
        await LoadWorkers();
        
        while (dateTime.DayOfWeek != DayOfWeek.Monday)
        {
            dateTime = dateTime.AddDays(-1);
        }

        Console.WriteLine(dateTime.Date.ToString() + "llo");
        
          weekNumber = CultureInfo.InvariantCulture.Calendar.GetWeekOfYear(dateTime, CalendarWeekRule.FirstFourDayWeek, DayOfWeek.Monday);
          year = dateTime.Year;
          month = dateTime.Month;

         await UpdateSchema();

    }
    
    private async Task LoadWorkers()
    {
        try
        {
            workers = await WorkerService.GetAsync(nameFilter);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
    
    private async Task UpdateSchema()
    {
        _workShifts = await GetWorkShifts();
    }
    
    private async Task<List<WorkShift>> GetWorkShifts()
    {
        IEnumerable<WorkShift> temp = await WorkShiftService.GetAsync();
        workShifts = temp.ToList();

        return workShifts;
    }
    
    
    private async Task CreateWorkShift()
    {
        popUpMsg = "";
        if (string.IsNullOrEmpty(date) || string.IsNullOrEmpty(fromTime) || string.IsNullOrEmpty(toTime) || string.IsNullOrEmpty(breakAmount))
        {
            popUpMsg = "Fields may not be empty";
            return;
        }
        
        try
        {
            WorkShiftCreationDto dto = new(date, fromTime, toTime, selectedUserId ,breakAmount, "1");

            WorkShift workShift = await WorkShiftService.CreateAsync(dto);
            
            //todo add workshift to schema without calling webapi
            await UpdateSchema();
            
            
            CloseCreatePopUp();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            popUpMsg = e.Message;
        }
    }


    
    private async Task UpdateDate(int weekNumberChange, int yearChange)
    {
        dateTime = dateTime.AddDays(weekNumberChange * 7);
        dateTime = dateTime.AddYears(yearChange);
        
    while (dateTime.DayOfWeek != DayOfWeek.Monday)
    {
        dateTime = dateTime.AddDays(-1);
    }
        
        weekNumber = CultureInfo.InvariantCulture.Calendar.GetWeekOfYear(dateTime, CalendarWeekRule.FirstFourDayWeek, DayOfWeek.Monday);
        year = dateTime.Year;
        month = dateTime.Month;

        if (selectedUserId != 0)
        {
            await UpdateSchema();
        }
    }
    
    private async Task UpdateWorkShift()
    {
        popUpMsg = "";
        if (string.IsNullOrEmpty(shiftId) || string.IsNullOrEmpty(workerId) || string.IsNullOrEmpty(date) || string.IsNullOrEmpty(fromTime) || string.IsNullOrEmpty(toTime) || string.IsNullOrEmpty(breakAmount))
        {
            popUpMsg = "Fields may not be empty";
            return;
        }
        
        try
        {
            WorkShiftUpdateDto dto = new(Int32.Parse(shiftId), Int32.Parse(workerId), date, fromTime, toTime, breakAmount);

            await WorkShiftService.UpdateAsync(dto);
            
    //todo add workshift to schema without calling webapi
            await UpdateSchema();
            
            
            CloseWorkShiftPopUp();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            popUpMsg = e.Message;
        }    
    }

    private async Task DeleteWorkShift()
    {
        await WorkShiftService.DeleteAsync(Int32.Parse(shiftId));
        await UpdateSchema();
        CloseDeleteConfirmationPopUp();
        CloseWorkShiftPopUp();
    }
    
    
    private void ShowCreatePopUp()
    {
        popUpMsg = "";
        showCreatePopUp = true;
    }
    
    private void CloseCreatePopUp()
    {
        showCreatePopUp = false;
    }
    
    private void ShowWorkShiftPopUp(string shiftId, string workerId, string date, string fromTime, string toTime, string breakAmount)
    {
        popUpMsg = "";
        this.shiftId = shiftId;
        this.date = date;
        this.fromTime = fromTime;
        this.toTime = toTime;
        this.breakAmount = breakAmount;
        this.workerId = workerId;
        showWorkShiftPopUp = true;
    }
    
    private void CloseWorkShiftPopUp()
    {
        showWorkShiftPopUp = false;
    }

    private void ShowDeleteConfirmationPopUp()
    {
        popUpMsg = "";
        showDeleteConfirmationPopUp = true;
    }
    
    private void CloseDeleteConfirmationPopUp()
    {
        showDeleteConfirmationPopUp = false;
    }


}