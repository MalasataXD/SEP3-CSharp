@page "/WorkShifts"
@using UIComponents

@inject IWorkerService WorkerService
@inject IWorkShiftService WorkShiftService
@inject NavigationManager navMgr


@using Domain.Models
@using HttpClients.Interfaces
@using Domain.DTOs.WorkShift
@using System.Globalization

<h3>WorkShifts</h3>

@if (workers == null)
{
    <p>You have no workers</p>
}

@if (workers != null)
{
    <div class="form-group field">
        <label>Worker:</label>
        <select @bind-value="selectedUserId" @bind-value:event="oninput">
            <option value="-1">Everyone</option>
            @foreach (Worker worker in workers)
            {
                <option value="@worker.WorkerId">@worker.getFullName()</option>
            }
        </select>
    </div>
    
    @if (selectedUserId == -1)
    {
        <div>
            <img class="icon" style="visibility: hidden" src="icons/shift-add.png" @onclick="ShowCreatePopUp"/>
        </div>
    }
    else
    {
        <div>
            <img class="icon" src="icons/shift-add.png" @onclick="ShowCreatePopUp"/>
        </div>
    }

    <div >
        <div class="btn-group">
            <h5>Year: @year</h5>
            <img class="icon" src="icons/arrow-alt-left.png" style="float: left" @onclick="@(e => UpdateDate(-1, 0))"/>
            <h5 style="float: left">Week: @weekNumber</h5>
            <img class="icon" src="icons/arrow-alt-right.png" @onclick="@(e => UpdateDate(1, 0))"/>
        </div>
    </div>


    @if (selectedUserId != -1 && _workShifts != null)
    {

        <table>
            <tr>
                @for (int i = 0; i < 7; i++)
                {
                    <td style="text-align: center">@dateTime.DayOfWeek @dateTime.Day-@dateTime.Month</td>
                    dateTime = dateTime.AddDays(1);
                }
                @if (true)
                {
                    dateTime = dateTime.AddDays(-7);
                }
            </tr>


            <tr>
                @for (int i = 0; i < 7; i++)
                {
                    int times = 0;
                    @foreach (var workShift in _workShifts)
                    {
                        string date = $"{dateTime.Day}-{dateTime.Month}-{dateTime.Year}";


                        times++;
                        if (workShift.Worker.WorkerId == selectedUserId && string.Equals(date, workShift.Date))
                        {
                            <td>
                                <button class="card" @onclick="@(e => ShowWorkShiftPopUp(workShift.ShiftId.ToString(), workShift.Worker.WorkerId.ToString(), workShift.Date, workShift.FromTime, workShift.ToTime, workShift.BreakAmount))">
                                    <WorkShiftComponent fromTime="@workShift.FromTime" toTime="@workShift.ToTime" BreakAmount="@workShift.BreakAmount"></WorkShiftComponent>
                                </button>
                            </td>
                            break;
                        }

                        if (times == _workShifts.ToList().Count)
                        {
                            <td>
                            </td>
                        }

                    }
                    dateTime = dateTime.AddDays(1);
                }

                @if (true)
                {
                    dateTime = dateTime.AddDays(-7);
                }
            </tr>
        </table>
        
    }
    
    else if (_workShifts != null)
    {
        <table class="table">
            <thead>
            <tr>
                <th>Name</th>
                @for (int i = 0; i < 7; i++)
            {
                    <td style="text-align: center">@dateTime.DayOfWeek @dateTime.Day-@dateTime.Month</td>
                dateTime = dateTime.AddDays(1);
            }
            @if (true)
            {
                dateTime = dateTime.AddDays(-7);
            }
        </tr>
            </thead>
            <tbody>
            @foreach (var worker in workers)
            {
                <tr>
                    <td>@worker.getFullName()</td>

                     @for (int i = 0; i < 7; i++)
                                   {
                                       int times = 0;
                                       @foreach (var workShift in _workShifts)
                                       {
                                           string date = $"{dateTime.Day}-{dateTime.Month}-{dateTime.Year}";

                                           times++;
                                           
                                           if (workShift.Worker.WorkerId == worker.WorkerId && string.Equals(date, workShift.Date))
                                           {
                                               <td>
                                                   <button class="card" @onclick="@(e => ShowWorkShiftPopUp(workShift.ShiftId.ToString(), workShift.Worker.WorkerId.ToString(), workShift.Date, workShift.FromTime, workShift.ToTime, workShift.BreakAmount))">
                                                       <WorkShiftComponent fromTime="@workShift.FromTime" toTime="@workShift.ToTime" BreakAmount="@workShift.BreakAmount"></WorkShiftComponent>
                                                   </button>
                                               </td>
                                               break;
                                           }
                   
                                           if (times == _workShifts.ToList().Count)
                                           {
                                               <td>
                                               </td>
                                           }
                   
                                       }
                                       dateTime = dateTime.AddDays(1);
                                   }
                   
                                   @if (true)
                                   {
                                       dateTime = dateTime.AddDays(-7);
                                   }
                </tr>
            }
            </tbody>
        </table>
    }
    

    if (online)
    {
        <button @onclick="() => online = false" disabled="@isWaiting">LIVE
        </button>
    }
    else
    {
        <button @onclick="ShowOnlineConfirmationPopUp" disabled="@isWaiting">OFFLINE
        </button>
        <button @onclick="ShowCreateWorkShiftsConfirmationPopUp" disabled="@isWaiting">Save changes
            
        </button>
    }
    
    
    
    <PopUp ShowPopUp="showCreatePopUp">
        
        <button @onclick="@CloseCreatePopUp" disabled="@isWaiting">Exit</button>
    
        <div class="form-group field">
            <label>Date:</label>
            <input type="text" @bind="date"/>
        </div>
    
        <div class="form-group field">
            <label>From Time:</label>
            <input type="text" @bind="fromTime"/>
        </div>
        <div class="form-group field">
            <label>To Time:</label>
            <input type="text" @bind="toTime"/>
        </div>
    
        <div class="form-group field">
            <label>Break Amount:</label>
            <input type="text" @bind="breakAmount"/>
        </div>
    
        <button @onclick="@CreateWorkShift" disabled="@isWaiting">Create WorkShift</button>
    
        @if (!string.IsNullOrEmpty(popUpMsg))
        {
            <label style="color: red">@popUpMsg</label>
        }
    </PopUp>
    
    <PopUp ShowPopUp="showWorkShiftPopUp">
        
        <button @onclick="@CloseWorkShiftPopUp" disabled="@isWaiting">Exit</button>
        
        <div class="form-group field">
            <label>WorkerId:</label>
            <input type="text" @bind="workerId"/>
        </div>
                <div class="form-group field">
                    <label>Date:</label>
                    <input type="text" @bind="date"/>
                </div>
            
                <div class="form-group field">
                    <label>From Time:</label>
                    <input type="text" @bind="fromTime"/>
                </div>
                <div class="form-group field">
                    <label>To Time:</label>
                    <input type="text" @bind="toTime"/>
                </div>
            
                <div class="form-group field">
                    <label>Break Amount:</label>
                    <input type="text" @bind="breakAmount"/>
                </div>
        
        <button @onclick="UpdateWorkShift" disabled="@isWaiting">Update WorkShift</button>
    
        <button @onclick="ShowDeleteConfirmationPopUp" disabled="@isWaiting">Delete WorkShift</button>

        
        @if (!string.IsNullOrEmpty(popUpMsg))
        {
            <label style="color: red">@popUpMsg</label>
        }
    </PopUp>

    <PopUp ShowPopUp="showDeleteConfirmationPopUp">
        <h3>Are you sure you want to delete this</h3>
        
        <button @onclick="DeleteWorkShift" disabled="@isWaiting">Yes</button>
        <button @onclick="CloseDeleteConfirmationPopUp" disabled="@isWaiting">No</button>
    </PopUp>
    
    
    <PopUp ShowPopUp="showOnlineConfirmationPopUp">
        <h3>Are you sure you want to go live?</h3>
        <h5>Doing so will not save your unsaved changes</h5>

        <button @onclick="GoLive" disabled="@isWaiting">Yes</button>
        <button @onclick="CloseOnlineConfirmationPopUp" disabled="@isWaiting">No</button>
    </PopUp>
    
    <PopUp ShowPopUp="showCreateWorkShiftsConfirmationPopUp">
                <h3>Are you sure you want to save your changes</h3>
        
                <button @onclick="CommitChangesToDatabase" disabled="@isWaiting" >Yes</button>
                <button @onclick="CloseCreateWorkShiftsConfirmationPopUp" disabled="@isWaiting">No</button>
    </PopUp>
    
}



@code {

    private bool online = true;
    
    private int selectedUserId = -1;

    private IEnumerable<Worker>? workers;
    private IEnumerable<WorkShift>? _workShifts;

    private List<WorkShift> WorkShiftsToCreate = new ();
    private List<WorkShift> WorkShiftsToUpdate = new ();
    private List<int> WorkShiftsToDelete = new ();

    private string popUpMsg = "";
    private bool showCreatePopUp;
    private bool showWorkShiftPopUp;
    private bool showDeleteConfirmationPopUp;
    private bool showOnlineConfirmationPopUp;
    private bool showCreateWorkShiftsConfirmationPopUp;
    private string? nameFilter;

    //Create PopUp textfields
    private string date;
    private string fromTime;
    private string toTime;
    private string breakAmount;
    private string shiftId;
    private string workerId;
    
    private DateTime dateTime = DateTime.Today;
    private int weekNumber;
    private int year;
    
    //Disables buttons while commiting changes
    private bool isWaiting = false;

    

    protected override async Task OnInitializedAsync()
    {
        await LoadWorkers();
        
        while (dateTime.DayOfWeek != DayOfWeek.Monday)
        {
            dateTime = dateTime.AddDays(-1);
        }

        
        weekNumber = CultureInfo.InvariantCulture.Calendar.GetWeekOfYear(dateTime, CalendarWeekRule.FirstFourDayWeek, DayOfWeek.Monday);
        year = dateTime.Year;

        await UpdateSchema();

    }
    
    private async Task LoadWorkers()
    {
        try
        {
            workers = await WorkerService.GetAsync(nameFilter);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }
    
    private async Task UpdateDate(int weekNumberChange, int yearChange)
    {

        dateTime = dateTime.AddDays(weekNumberChange * 7);
        dateTime = dateTime.AddYears(yearChange);
        
        while (dateTime.DayOfWeek != DayOfWeek.Monday)
        {
            dateTime = dateTime.AddDays(-1);
        }
        
        weekNumber = CultureInfo.InvariantCulture.Calendar.GetWeekOfYear(dateTime, CalendarWeekRule.FirstFourDayWeek, DayOfWeek.Monday);
        year = dateTime.Year;
        
    }
    
    private async Task UpdateSchema()
    {
        _workShifts = await WorkShiftService.GetAsync();
    }

    private async Task CreateWorkShift()
    {
        isWaiting = true;
        
        popUpMsg = "";
        if (string.IsNullOrEmpty(date) || string.IsNullOrEmpty(fromTime) || string.IsNullOrEmpty(toTime) || string.IsNullOrEmpty(breakAmount))
        {
            isWaiting = false;
            popUpMsg = "Fields may not be empty";
            return;
        }
        
        try
        {
            WorkShiftValidateDto dto = new WorkShiftValidateDto(date, fromTime, toTime, selectedUserId, breakAmount, _workShifts);
            
            await WorkShiftService.ValidateAsync(dto);

            Worker worker = workers.ToList().Find(worker => worker.WorkerId == selectedUserId);
            WorkShift workShift = new WorkShift(date, fromTime, toTime, worker, breakAmount,"1");

            int id = -1;
            if (WorkShiftsToCreate.Any())
            {
                id = WorkShiftsToCreate.Min(shift => shift.ShiftId);
                id--;
            }
            workShift.ShiftId = id;

            Console.WriteLine(workShift.ShiftId);
            WorkShiftsToCreate.Add(workShift);
            
            List<WorkShift> workShifts = _workShifts.ToList();

            workShifts.Add(workShift);

            _workShifts = workShifts.AsEnumerable();


            if (online)
            {
            WorkShiftCreationDto CreateDto = new(date, fromTime, toTime, selectedUserId ,breakAmount, "1");
            await WorkShiftService.CreateAsync(CreateDto);
            await UpdateSchema();
            }
            
            
            CloseCreatePopUp();
        } 
        catch (Exception e)
        {
            Console.WriteLine(e);
            popUpMsg = e.Message;
            isWaiting = false;
        }
        isWaiting = false;

    }

    
    
    private async Task UpdateWorkShift()
    {
        isWaiting = true;

        popUpMsg = "";
        if (string.IsNullOrEmpty(shiftId) || string.IsNullOrEmpty(workerId) || string.IsNullOrEmpty(date) || string.IsNullOrEmpty(fromTime) || string.IsNullOrEmpty(toTime) || string.IsNullOrEmpty(breakAmount))
        {
            isWaiting = false;
            popUpMsg = "Fields may not be empty";
            return;
        }
        
        try
        {
            Worker worker = workers.ToList().Find(worker => worker.WorkerId == Int32.Parse(workerId));
            WorkShift workShift = new WorkShift(date, fromTime, toTime, worker, breakAmount,"1");
            workShift.ShiftId = Int32.Parse(shiftId);
            
            if (WorkShiftsToUpdate.Any())
            {
                int index1 = WorkShiftsToUpdate.FindIndex(shift => shift.ShiftId == workShift.ShiftId);

                if (index1 != -1)
                {
                    WorkShiftsToUpdate[index1] = workShift;
                }
                else
                {
                    WorkShiftsToUpdate.Add(workShift);
                }
            }
            else
            {
                if (workShift.ShiftId < 0)
                {
                    int index2 = WorkShiftsToCreate.FindIndex(shift => shift.ShiftId == workShift.ShiftId);
                    WorkShiftsToCreate[index2] = workShift;
                }
                else
                {
                    WorkShiftsToUpdate.Add(workShift);
                }
            }
            
            List<WorkShift> workShifts = _workShifts.ToList();

            int index3 = workShifts.FindIndex(shift => shift.ShiftId == workShift.ShiftId);

            workShifts.RemoveAt(index3);
            
            WorkShiftValidateDto dto = new WorkShiftValidateDto(date, fromTime, toTime, Int32.Parse(workerId), breakAmount, workShifts);
            await WorkShiftService.ValidateAsync(dto);

            workShifts.Add(workShift);
            
            _workShifts = workShifts.AsEnumerable();

            if (online)
            {
                Console.WriteLine(shiftId);
                WorkShiftUpdateDto updateDto = new(Int32.Parse(shiftId), Int32.Parse(workerId), date, fromTime, toTime, breakAmount);
                await WorkShiftService.UpdateAsync(updateDto);
            }
            
            CloseWorkShiftPopUp();
        }
        catch (Exception e)
        {
            isWaiting = false;
            Console.WriteLine(e);
            popUpMsg = e.Message;
        }  
        isWaiting = false;

    }

    private async Task DeleteWorkShift()
    {
        isWaiting = true;

        try
        {
            List<WorkShift> workShifts = _workShifts.ToList();

            if (Int32.Parse(shiftId) > 0)
            {
                int index1 = WorkShiftsToUpdate.FindIndex(shift => shift.ShiftId == Int32.Parse(shiftId));
            
                if (index1 != -1)
                {
                    WorkShiftsToUpdate.RemoveAt(index1);
                }
            
                WorkShiftsToDelete.Add(Int32.Parse(shiftId));
            }
            else
            {
                int index1 = WorkShiftsToCreate.FindIndex(shift => shift.ShiftId == Int32.Parse(shiftId));
                WorkShiftsToCreate.RemoveAt(index1);
            }


            int index2 = workShifts.FindIndex(shift => shift.ShiftId == Int32.Parse(shiftId));
            CloseDeleteConfirmationPopUp();

            if (workShifts.Remove(workShifts[index2]))
            {
                CloseWorkShiftPopUp();
                _workShifts = workShifts.ToList();
            }
            else
            {
                popUpMsg = "The workshift you are trying to delete does not exist!";
            }

            if (online)
            {
                await WorkShiftService.DeleteAsync(Int32.Parse(shiftId));
            }

        }
        catch (Exception e)
        {
            isWaiting = false;
            Console.WriteLine(e);
            throw;
        }
      
        isWaiting = false;

    }

    private async Task CommitChangesToDatabase()
    {
        isWaiting = true;

        try
        {
            List<WorkShiftCreationDto> createDtos = new ();
            List<WorkShiftUpdateDto> updatedDtos = new ();

            foreach (var shift in WorkShiftsToCreate)
            {
                WorkShiftCreationDto dto = new(shift.Date, shift.FromTime, shift.ToTime, shift.Worker.WorkerId, shift.BreakAmount, "1");
                createDtos.Add(dto);
            }
            foreach (var shift in WorkShiftsToUpdate)
            {
                WorkShiftUpdateDto dto = new(shift.ShiftId, shift.Worker.WorkerId, shift.Date, shift.FromTime, shift.ToTime, shift.BreakAmount);
                updatedDtos.Add(dto);
            }
        
            await WorkShiftService.CreateAsync(createDtos.AsEnumerable());
            await WorkShiftService.UpdateAsync(updatedDtos.AsEnumerable());
            await WorkShiftService.DeleteAsync(WorkShiftsToDelete);
            
            Thread.Sleep(1000);
            
            await UpdateSchema();
            
            WorkShiftsToCreate.Clear();
            WorkShiftsToUpdate.Clear();
            WorkShiftsToDelete.Clear();
        }
        catch
        {
            isWaiting = false;
        }
        isWaiting = false;
        CloseCreateWorkShiftsConfirmationPopUp();
    }
    
    
    private void ShowCreatePopUp()
    {
        popUpMsg = "";
        showCreatePopUp = true;
    }
    
    private void CloseCreatePopUp()
    {
        showCreatePopUp = false;
    }
    
    private void ShowWorkShiftPopUp(string shiftId, string workerId, string date, string fromTime, string toTime, string breakAmount)
    {
        popUpMsg = "";
        this.shiftId = shiftId;
        this.date = date;
        this.fromTime = fromTime;
        this.toTime = toTime;
        this.breakAmount = breakAmount;
        this.workerId = workerId;
        showWorkShiftPopUp = true;
    }
    
    private void CloseWorkShiftPopUp()
    {
        showWorkShiftPopUp = false;
    }

    private void ShowDeleteConfirmationPopUp()
    {
        popUpMsg = "";
        showDeleteConfirmationPopUp = true;
    }
    
    private void CloseDeleteConfirmationPopUp()
    {
        showDeleteConfirmationPopUp = false;
    }

    private void ShowOnlineConfirmationPopUp()
    {
        showOnlineConfirmationPopUp = true;
    }
    
    private void CloseOnlineConfirmationPopUp()
    {
        showOnlineConfirmationPopUp = false;
    }
    
    private void ShowCreateWorkShiftsConfirmationPopUp()
    {
        showCreateWorkShiftsConfirmationPopUp = true;
    }
    
    private void CloseCreateWorkShiftsConfirmationPopUp()
    {
        showCreateWorkShiftsConfirmationPopUp = false;
    }
    

    private async Task GoLive()
    {
        isWaiting = true;
        online = true;
        await UpdateSchema();
        CloseOnlineConfirmationPopUp();
        isWaiting = false;
    }


}